// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod component {
    pub mod wit_limbo {
        #[allow(dead_code, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            #[allow(unused_unsafe, clippy::all)]
            /// get a random byte
            pub fn random_byte() -> u8 {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:wit-limbo/host")]
                    extern "C" {
                        #[link_name = "random-byte"]
                        fn wit_import() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import() -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import();
                    ret as u8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Logs a message to the console.
            pub fn log(message: &str) {
                unsafe {
                    let vec0 = message;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "component:wit-limbo/host")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0);
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod component {
        pub mod wit_limbo {
            #[allow(dead_code, clippy::all)]
            pub mod limbo {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                /// Value types
                #[derive(Clone)]
                pub enum RecordValue {
                    /// A null value
                    Null,
                    /// A string value.
                    Integer(i64),
                    /// Float
                    Float(f64),
                    /// Text
                    Text(_rt::String),
                    /// Blob
                    Blob(_rt::Vec<u8>),
                }
                impl ::core::fmt::Debug for RecordValue {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            RecordValue::Null => {
                                f.debug_tuple("RecordValue::Null").finish()
                            }
                            RecordValue::Integer(e) => {
                                f.debug_tuple("RecordValue::Integer").field(e).finish()
                            }
                            RecordValue::Float(e) => {
                                f.debug_tuple("RecordValue::Float").field(e).finish()
                            }
                            RecordValue::Text(e) => {
                                f.debug_tuple("RecordValue::Text").field(e).finish()
                            }
                            RecordValue::Blob(e) => {
                                f.debug_tuple("RecordValue::Blob").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Database {
                    handle: _rt::Resource<Database>,
                }
                type _DatabaseRep<T> = Option<T>;
                impl Database {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Database`.
                    pub fn new<T: GuestDatabase>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _DatabaseRep<T> = Some(val);
                        let ptr: *mut _DatabaseRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestDatabase>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestDatabase>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestDatabase>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _DatabaseRep<T>);
                    }
                    fn as_ptr<T: GuestDatabase>(&self) -> *mut _DatabaseRep<T> {
                        Database::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Database`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct DatabaseBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Database>,
                }
                impl<'a> DatabaseBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestDatabase>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _DatabaseRep<T> {
                        Database::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Database {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wit-limbo/limbo"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]database"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                /// Resource statement.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Statement {
                    handle: _rt::Resource<Statement>,
                }
                type _StatementRep<T> = Option<T>;
                impl Statement {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Statement`.
                    pub fn new<T: GuestStatement>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _StatementRep<T> = Some(val);
                        let ptr: *mut _StatementRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestStatement>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestStatement>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestStatement>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _StatementRep<T>);
                    }
                    fn as_ptr<T: GuestStatement>(&self) -> *mut _StatementRep<T> {
                        Statement::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Statement`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct StatementBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Statement>,
                }
                impl<'a> StatementBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestStatement>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _StatementRep<T> {
                        Statement::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Statement {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wit-limbo/limbo"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]statement"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_database_cabi<T: GuestDatabase>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = Database::new(T::new(_rt::string_lift(bytes0)));
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_database_exec_cabi<T: GuestDatabase>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    T::exec(
                        DatabaseBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_database_prepare_cabi<T: GuestDatabase>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::prepare(
                        DatabaseBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    (result1).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_statement_all_cabi<T: GuestStatement>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::all(
                        StatementBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec5 = result0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec5.len() * 8,
                        4,
                    );
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5.add(i * 8);
                        {
                            let vec4 = e;
                            let len4 = vec4.len();
                            let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec4.len() * 16,
                                8,
                            );
                            let result4 = if layout4.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout4);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec4.into_iter().enumerate() {
                                let base = result4.add(i * 16);
                                {
                                    match e {
                                        RecordValue::Null => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                        }
                                        RecordValue::Integer(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                        }
                                        RecordValue::Float(e) => {
                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                        }
                                        RecordValue::Text(e) => {
                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                            let vec2 = (e.into_bytes()).into_boxed_slice();
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();
                                            ::core::mem::forget(vec2);
                                            *base.add(12).cast::<usize>() = len2;
                                            *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                        }
                                        RecordValue::Blob(e) => {
                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                            let vec3 = (e).into_boxed_slice();
                                            let ptr3 = vec3.as_ptr().cast::<u8>();
                                            let len3 = vec3.len();
                                            ::core::mem::forget(vec3);
                                            *base.add(12).cast::<usize>() = len3;
                                            *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                        }
                                    }
                                }
                            }
                            *base.add(4).cast::<usize>() = len4;
                            *base.add(0).cast::<*mut u8>() = result4;
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len5;
                    *ptr1.add(0).cast::<*mut u8>() = result5;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_statement_all<T: GuestStatement>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base11 = l0;
                    let len11 = l1;
                    for i in 0..len11 {
                        let base = base11.add(i * 8);
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base.add(4).cast::<usize>();
                            let base10 = l2;
                            let len10 = l3;
                            for i in 0..len10 {
                                let base = base10.add(i * 16);
                                {
                                    let l4 = i32::from(*base.add(0).cast::<u8>());
                                    match l4 {
                                        0 => {}
                                        1 => {}
                                        2 => {}
                                        3 => {
                                            let l5 = *base.add(8).cast::<*mut u8>();
                                            let l6 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l5, l6, 1);
                                        }
                                        _ => {
                                            let l7 = *base.add(8).cast::<*mut u8>();
                                            let l8 = *base.add(12).cast::<usize>();
                                            let base9 = l7;
                                            let len9 = l8;
                                            _rt::cabi_dealloc(base9, len9 * 1, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base10, len10 * 16, 8);
                        }
                    }
                    _rt::cabi_dealloc(base11, len11 * 8, 4);
                }
                pub trait Guest {
                    type Database: GuestDatabase;
                    type Statement: GuestStatement;
                }
                pub trait GuestDatabase: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wit-limbo/limbo"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]database"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wit-limbo/limbo"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]database"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Create a new database connection.
                    fn new(path: _rt::String) -> Self;
                    /// Execute a SQL statement.
                    fn exec(&self, sql: _rt::String);
                    /// Prepare a SQL statement.
                    fn prepare(&self, sql: _rt::String) -> Statement;
                }
                pub trait GuestStatement: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wit-limbo/limbo"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]statement"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]component:wit-limbo/limbo"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]statement"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    /// Get all rows from the statement.
                    fn all(&self) -> _rt::Vec<_rt::Vec<RecordValue>>;
                }
                #[doc(hidden)]
                macro_rules! __export_component_wit_limbo_limbo_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "component:wit-limbo/limbo#[constructor]database"] unsafe extern
                        "C" fn export_constructor_database(arg0 : * mut u8, arg1 :
                        usize,) -> i32 { $($path_to_types)*::
                        _export_constructor_database_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Database > (arg0, arg1) } #[export_name =
                        "component:wit-limbo/limbo#[method]database.exec"] unsafe extern
                        "C" fn export_method_database_exec(arg0 : * mut u8, arg1 : * mut
                        u8, arg2 : usize,) { $($path_to_types)*::
                        _export_method_database_exec_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Database > (arg0, arg1, arg2) } #[export_name =
                        "component:wit-limbo/limbo#[method]database.prepare"] unsafe
                        extern "C" fn export_method_database_prepare(arg0 : * mut u8,
                        arg1 : * mut u8, arg2 : usize,) -> i32 { $($path_to_types)*::
                        _export_method_database_prepare_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Database > (arg0, arg1, arg2) }
                        #[export_name =
                        "component:wit-limbo/limbo#[method]statement.all"] unsafe extern
                        "C" fn export_method_statement_all(arg0 : * mut u8,) -> * mut u8
                        { $($path_to_types)*:: _export_method_statement_all_cabi::<<$ty
                        as $($path_to_types)*:: Guest >::Statement > (arg0) }
                        #[export_name =
                        "cabi_post_component:wit-limbo/limbo#[method]statement.all"]
                        unsafe extern "C" fn _post_return_method_statement_all(arg0 : *
                        mut u8,) { $($path_to_types)*::
                        __post_return_method_statement_all::<<$ty as $($path_to_types)*::
                        Guest >::Statement > (arg0) } const _ : () = { #[doc(hidden)]
                        #[export_name = "component:wit-limbo/limbo#[dtor]database"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: Database::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Database > (rep) } }; const _ : ()
                        = { #[doc(hidden)] #[export_name =
                        "component:wit-limbo/limbo#[dtor]statement"]
                        #[allow(non_snake_case)] unsafe extern "C" fn dtor(rep : * mut
                        u8) { $($path_to_types)*:: Statement::dtor::< <$ty as
                        $($path_to_types)*:: Guest >::Statement > (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_component_wit_limbo_limbo_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 8],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_example_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::component::wit_limbo::limbo::__export_component_wit_limbo_limbo_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::component::wit_limbo::limbo);
    };
}
#[doc(inline)]
pub(crate) use __export_example_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:component:wit-limbo:example:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 565] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb7\x03\x01A\x02\x01\
A\x04\x01B\x04\x01@\0\0}\x04\0\x0brandom-byte\x01\0\x01@\x01\x07messages\x01\0\x04\
\0\x03log\x01\x01\x03\0\x18component:wit-limbo/host\x05\0\x01B\x15\x01q\x01\x04n\
one\0\0\x04\0\x04null\x03\0\0\x01p}\x01q\x05\x04null\0\0\x07integer\x01x\0\x05fl\
oat\x01u\0\x04text\x01s\0\x04blob\x01\x02\0\x04\0\x0crecord-value\x03\0\x03\x04\0\
\x08database\x03\x01\x04\0\x09statement\x03\x01\x01i\x05\x01@\x01\x04paths\0\x07\
\x04\0\x15[constructor]database\x01\x08\x01h\x05\x01@\x02\x04self\x09\x03sqls\x01\
\0\x04\0\x15[method]database.exec\x01\x0a\x01i\x06\x01@\x02\x04self\x09\x03sqls\0\
\x0b\x04\0\x18[method]database.prepare\x01\x0c\x01h\x06\x01p\x04\x01p\x0e\x01@\x01\
\x04self\x0d\0\x0f\x04\0\x15[method]statement.all\x01\x10\x04\0\x19component:wit\
-limbo/limbo\x05\x01\x04\0\x1bcomponent:wit-limbo/example\x04\0\x0b\x0d\x01\0\x07\
example\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.22\
0.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
